#!/bin/bash

# --- Initialisation ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
DRY_RUN=false

# --- Analyse des arguments ---
for arg in "$@"; do
  case $arg in
    --dry-run)
      DRY_RUN=true
      ;;
    -h|--help)
      echo "‚ÑπÔ∏è  Usage: finish-hotfix [--dry-run]"
      echo "  Must be run from a 'hotfix/<name>' branch"
      exit 0
      ;;
    *)
      echo "‚ùå Unknown argument: $arg"
      exit 1
      ;;
  esac
done

# --- V√©rifie qu'on est bien sur une branche hotfix ---
if [[ ! "$CURRENT_BRANCH" =~ ^hotfix\/.+$ ]]; then
  echo "‚ùå You must be on a 'hotfix/<name>' branch to use this command."
  exit 1
fi

HOTFIX_NAME="${CURRENT_BRANCH#hotfix/}"

# --- Mode dry-run ---
if $DRY_RUN; then
  echo "üß™ [DRY-RUN] Would merge '$CURRENT_BRANCH' into release/*"
  echo "üß™ [DRY-RUN] Would tag: release.X.Y+1"
  echo "üß™ [DRY-RUN] Would push tag and branches"
  echo "üß™ [DRY-RUN] Would generate .history/release.X.Y+1.md"
  echo "üß™ [DRY-RUN] Would delete branch '$CURRENT_BRANCH'"
  exit 0
fi

# --- V√©rifie que le d√©p√¥t est valide ---
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "‚ùå Not a valid Git repository."
  exit 1
fi

# --- D√©duction de la branche release source ---
RELEASE_BRANCH=$(git branch -r --contains "$CURRENT_BRANCH" | grep "origin/release/" | sed 's|origin/||' | head -n 1)

if [[ -z "$RELEASE_BRANCH" ]]; then
  echo "‚ùå Unable to determine the release branch containing this hotfix."
  exit 1
fi

# --- Mise √† jour de la branche release ---
echo "üîÅ Checking out '$RELEASE_BRANCH'..."
if ! git checkout "$RELEASE_BRANCH"; then
  echo "‚ùå Failed to checkout '$RELEASE_BRANCH'."
  exit 1
fi

if ! git pull origin "$RELEASE_BRANCH"; then
  echo "‚ùå Failed to pull latest changes from origin/$RELEASE_BRANCH."
  exit 1
fi

# --- Fusion du hotfix dans release ---
echo "üîß Merging '$CURRENT_BRANCH' into '$RELEASE_BRANCH'..."
if ! HUSKY=0 git merge --no-ff "$CURRENT_BRANCH" -m "üîß Merge hotfix/$HOTFIX_NAME into $RELEASE_BRANCH"; then
  echo "‚ùå Merge failed. Please resolve conflicts manually."
  exit 1
fi

# --- Calcul du prochain tag release.X.Y+1 ---
LAST_TAG=$(git tag --merged "$RELEASE_BRANCH" | grep "^release\." | grep "${RELEASE_BRANCH#release/}" | sort -V | tail -n 1)
if [[ -z "$LAST_TAG" ]]; then
  NEW_TAG="release.${RELEASE_BRANCH#release/}.1"
else
  LAST_MINOR=$(echo "$LAST_TAG" | awk -F. '{print $NF}')
  NEXT_MINOR=$((LAST_MINOR + 1))
  NEW_TAG="release.${RELEASE_BRANCH#release/}.$NEXT_MINOR"
fi

# --- Cr√©ation du tag ---
echo "üè∑Ô∏è  Tagging '$RELEASE_BRANCH' with '$NEW_TAG'..."
HUSKY=0 git tag -a "$NEW_TAG" -m "Hotfix $HOTFIX_NAME merged into $RELEASE_BRANCH"

# --- Push du tag ---
echo "üöÄ Pushing tag '$NEW_TAG' to origin..."
HUSKY=0 git push origin "$NEW_TAG"

# --- Mise √† jour de develop ---
echo "üîÅ Checking out 'develop'..."
if ! git checkout develop; then
  echo "‚ùå Failed to checkout 'develop'."
  exit 1
fi

if ! git pull origin develop; then
  echo "‚ùå Failed to pull latest changes from origin/develop."
  exit 1
fi

# --- Fusion de release dans develop ---
echo "üîÑ Merging '$RELEASE_BRANCH' into 'develop'..."
echo "üîÑ Merging '$RELEASE_BRANCH' into 'develop'..."
if ! HUSKY=0 git merge --no-ff "$RELEASE_BRANCH" -m "üîÑ Merge $RELEASE_BRANCH into develop (includes hotfix/$HOTFIX_NAME)"; then
  echo "‚ùå Merge into develop failed."
  exit 1
fi

# --- Push des branches ---
echo "üöÄ Pushing '$RELEASE_BRANCH' and 'develop' to origin..."
if ! HUSKY=0 git push origin "$RELEASE_BRANCH" && HUSKY=0 git push origin develop; then
  echo "‚ùå Failed to push branches to origin."
  exit 1
fi

# --- G√©n√©ration du fichier de package ---
REPO_ROOT=$(git rev-parse --show-toplevel)
mkdir -p "$REPO_ROOT/.history"
PACKAGE_FILE="$REPO_ROOT/.history/${NEW_TAG}.md"

COMMITS=$(git log "$RELEASE_BRANCH".."$CURRENT_BRANCH" --pretty=format:"%h %s (%an, %ad)" --date=short)

{
  echo "# Package de d√©ploiement : $NEW_TAG"
  echo ""
  echo "**Date de g√©n√©ration :** $(date '+%Y-%m-%d %H:%M:%S')"
  echo "**Branche de base :** $RELEASE_BRANCH"
  echo ""
  echo "## Liste des commits"
  echo ""
  if [[ -z "$COMMITS" ]]; then
    echo "_Aucun commit d√©tect√©._"
  else
    echo "$COMMITS"
  fi
} > "$PACKAGE_FILE"

echo "üì¶ Fichier de package g√©n√©r√© : $PACKAGE_FILE"

# --- Suppression de la branche hotfix ---
echo "üßπ Deleting local branch '$CURRENT_BRANCH'..."
if ! git branch -d "$CURRENT_BRANCH"; then
  echo "‚ö†Ô∏è  Could not delete local branch '$CURRENT_BRANCH'."
else
  echo "‚úÖ Local branch '$CURRENT_BRANCH' deleted."
fi

echo "üßπ Deleting remote branch '$CURRENT_BRANCH'..."
if ! git push origin --delete "$CURRENT_BRANCH"; then
  echo "‚ö†Ô∏è  Could not delete remote branch '$CURRENT_BRANCH'."
else
  echo "‚úÖ Remote branch '$CURRENT_BRANCH' deleted."
fi

# --- R√©sum√© final ---
echo "üéâ Hotfix '$HOTFIX_NAME' successfully merged into:"
echo "  - $RELEASE_BRANCH"
echo "  - develop"
echo "üè∑Ô∏è  Tag created: $NEW_TAG"
