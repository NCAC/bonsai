#!/bin/bash
set -euo pipefail

# --- Initialisation ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
DRY_RUN=false

# --- Analyse des arguments ---
for arg in "$@"; do
  case $arg in
    --dry-run)
      DRY_RUN=true
      ;;
    -h|--help)
      echo "‚ÑπÔ∏è  Usage: sync-feature [--dry-run]"
      echo "  Synchronise la branche courante avec 'develop'"
      echo "  Example: sync-feature"
      echo "  Example: sync-feature --dry-run"
      exit 0
      ;;
    *)
      echo "‚ùå Unknown argument: $arg"
      exit 1
      ;;
  esac
done

# --- V√©rifications de base ---
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "‚ùå Not a valid Git repository."
  exit 1
fi

# --- V√©rifie qu'on est sur une branche feature ou bugfix ---
if [[ ! "$CURRENT_BRANCH" =~ ^feature\/.+$ && ! "$CURRENT_BRANCH" =~ ^bugfix\/.+$ ]]; then
  echo "‚ùå You must be on a 'feature/<name>' or 'bugfix/<name>' branch to use this command."
  exit 1
fi

# --- V√©rifie les modifications locales non commit√©es ---
if ! git diff-index --quiet HEAD --; then
  echo "‚ö†Ô∏è  You have uncommitted changes that might conflict with the sync."
  echo "   Consider committing or stashing them first with:"
  echo "   git add . && commit"
  echo "   Or to stash: git stash"
  
  read -p "‚ùì Do you want to continue anyway? (y/N): " response
  if [[ ! "$response" =~ ^[Yy]$ ]]; then
    echo "üõë Sync operation aborted."
    exit 1
  fi
fi

# --- Met √† jour les r√©f√©rences distantes ---
echo "üîÑ Fetching latest changes from origin..."
git fetch origin

# --- Mode dry-run ---
if $DRY_RUN; then
  echo "üß™ [DRY-RUN] Would merge 'origin/develop' into '$CURRENT_BRANCH'"
  
  # V√©rification des conflits potentiels
  CONFLICTS=$(git merge-tree $(git merge-base $CURRENT_BRANCH origin/develop) $CURRENT_BRANCH origin/develop | grep -c "^<<<<<<< ")
  
  if [ "$CONFLICTS" -gt 0 ]; then
    echo "‚ö†Ô∏è  [DRY-RUN] The merge would result in $CONFLICTS conflict(s)."
  else
    echo "‚úÖ [DRY-RUN] No conflicts detected, the merge would succeed."
  fi
  
  exit 0
fi

# --- Effectue la synchronisation ---
echo "üîÄ Merging 'origin/develop' into '$CURRENT_BRANCH'..."

if git merge origin/develop; then
  echo "‚úÖ Branch '$CURRENT_BRANCH' successfully synchronized with 'develop'."
else
  echo "‚ö†Ô∏è  Merge conflicts detected. Please resolve them manually:"
  echo "1Ô∏è‚É£  Edit the conflicting files to resolve the conflicts"
  echo "2Ô∏è‚É£  Mark them as resolved with: git add <file>"
  echo "3Ô∏è‚É£  Complete the merge with: git merge --continue"
  echo ""
  echo "üí° If you want to abort the merge: git merge --abort"
  exit 1
fi

# --- Push des changements ---
echo "üöÄ Pushing changes to origin..."

if HUSKY=0 git push origin "$CURRENT_BRANCH"; then
  echo "‚úÖ Changes pushed to origin/$CURRENT_BRANCH."
else
  echo "‚ùå Failed to push changes to origin/$CURRENT_BRANCH."
  echo "   You may need to push manually: git push origin $CURRENT_BRANCH"
  exit 1
fi

echo "üéâ Sync complete! Your branch is now up-to-date with 'develop'."
