#!/bin/bash
set -euo pipefail

# --- Initialisation ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
DRY_RUN=false
FEATURE_NAME=""

# --- Analyse des arguments ---
for arg in "$@"; do
  case $arg in
    --dry-run)
      DRY_RUN=true
      ;;
    -h|--help)
      echo "‚ÑπÔ∏è  Usage: start-feature [--dry-run] <name>"
      echo "  Example: start-feature my-feature"
      echo "  Example: start-feature --dry-run my-feature"
      exit 0
      ;;
    *)
      FEATURE_NAME=$arg
      ;;
  esac
done

# --- V√©rifications de base ---
if [ -z "$FEATURE_NAME" ]; then
  echo "‚ùå Usage : start-feature <name>"
  echo "   Example: start-feature [--dry-run] my-feature"
  exit 1
fi

if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "‚ùå Not a valid Git repository."
  exit 1
fi

if [[ "$CURRENT_BRANCH" != "develop" ]]; then
  echo "‚ùå You must be on 'develop' branch to create a 'feature' branch."
  exit 1
fi

# --- Met √† jour les r√©f√©rences distantes ---
echo "üîÑ Fetching latest changes from origin..."
git fetch origin

FEATURE_BRANCH="feature/${FEATURE_NAME}"

# --- V√©rifie que la branche n'existe pas d√©j√† ---
if git rev-parse --verify --quiet "$FEATURE_BRANCH" > /dev/null; then
  echo "‚ùå Branch '$FEATURE_BRANCH' already exists."
  exit 1
fi

# --- V√©rifie le nom de la branche ---
if [[ ! "$FEATURE_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
  echo "‚ùå Invalid branch name '$FEATURE_NAME'. Only letters, numbers, dots, dashes and underscores are allowed."
  exit 1
fi

if [[ ${#FEATURE_NAME} -lt 4 ]]; then
  echo "‚ùå Branch name '$FEATURE_NAME' must be at least 4 characters long."
  exit 1
fi

# --- V√©rifie si develop est √† jour avec origin/develop ---
LOCAL_HASH=$(git rev-parse develop)
REMOTE_HASH=$(git rev-parse origin/develop)

if [[ "$LOCAL_HASH" != "$REMOTE_HASH" ]]; then
  echo "‚ö†Ô∏è  Local 'develop' is behind 'origin/develop'. Attempting to pull..."
  git pull origin develop
  echo "‚úÖ 'develop' successfully updated."
fi

# --- V√©rifie les modifications locales ---
if ! git diff-index --quiet HEAD --; then
  echo "‚ö†Ô∏è  You have uncommitted changes. They will be carried into the new branch."
fi

if [[ -n $(git ls-files --others --exclude-standard) ]]; then
  echo "‚ö†Ô∏è  You have untracked files. They will be visible in the new branch."
fi

# --- Mode dry-run ---
if $DRY_RUN; then
  echo "üß™ [DRY-RUN] Would create branch: $FEATURE_BRANCH from $CURRENT_BRANCH"
  exit 0
fi

# --- Cr√©ation de la branche ---
git checkout -b "$FEATURE_BRANCH"

echo "‚úÖ Branch '$FEATURE_BRANCH' created from '$CURRENT_BRANCH'."

# --- Push de la branche ---
HUSKY=0 git push origin "$FEATURE_BRANCH" || {
  echo "‚ö†Ô∏è Failed to push '$FEATURE_BRANCH' to origin. Please check your network or remote permissions."
  exit 1
}

echo "üöÄ Branch '$FEATURE_BRANCH' pushed to origin and ready to use."
