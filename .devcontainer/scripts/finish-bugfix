#!/bin/bash

# --- Initialisation ---
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
DRY_RUN=false

# --- Analyse des arguments ---
for arg in "$@"; do
  case $arg in
    --dry-run)
      DRY_RUN=true
      ;;
    -h|--help)
      echo "‚ÑπÔ∏è  Usage: finish-bugfix [--dry-run]"
      echo "  Must be run from a 'bugfix/<name>' branch"
      exit 0
      ;;
    *)
      echo "‚ùå Unknown argument: $arg"
      exit 1
      ;;
  esac
done

# --- V√©rifie qu'on est bien sur une branche bugfix ---
if [[ ! "$CURRENT_BRANCH" =~ ^bugfix\/.+$ ]]; then
  echo "‚ùå You must be on a 'bugfix/<name>' branch to use this command."
  exit 1
fi

BUGFIX_NAME="${CURRENT_BRANCH#bugfix/}"
TAG="dev.bugfix.$BUGFIX_NAME"

# --- Mode dry-run ---
if $DRY_RUN; then
  echo "üß™ [DRY-RUN] Would merge '$CURRENT_BRANCH' into 'develop'"
  echo "üß™ [DRY-RUN] Would tag: $TAG"
  echo "üß™ [DRY-RUN] Would generate file: .history/$TAG.md"
  echo "üß™ [DRY-RUN] Would push develop and tag to origin"
  echo "üß™ [DRY-RUN] Would delete branch '$CURRENT_BRANCH'"
  exit 0
fi

# --- V√©rifie que le d√©p√¥t est valide ---
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
  echo "‚ùå Not a valid Git repository."
  exit 1
fi

# --- Met √† jour develop ---
echo "üîÑ Fetching latest changes from origin..."
git fetch origin

if ! git show-ref --verify --quiet refs/heads/develop; then
  echo "‚ùå Branch 'develop' does not exist locally."
  exit 1
fi

echo "üîÅ Checking out 'develop' to update..."
if ! git checkout develop; then
  echo "‚ùå Failed to checkout 'develop'."
  exit 1
fi

if ! git pull origin develop; then
  echo "‚ùå Failed to pull latest changes from origin/develop."
  exit 1
fi

# --- V√©rifie que develop est d√©j√† merg√© dans la bugfix ---
echo "üîç Checking if 'develop' is already merged into '$CURRENT_BRANCH'..."
if ! git merge-base --is-ancestor develop "$CURRENT_BRANCH"; then
  echo "‚ùå Branch '$CURRENT_BRANCH' does not contain the latest 'develop'."
  echo "üëâ Please merge 'develop' into '$CURRENT_BRANCH' before proceeding."
  exit 1
fi

# --- G√©n√®re le fichier d'historique ---
echo "üìù Generating merge history..."
REPO_ROOT=$(git rev-parse --show-toplevel)
mkdir -p "$REPO_ROOT/.history"
FILENAME="$REPO_ROOT/.history/${TAG}.md"

{
  echo "# Merge of ${CURRENT_BRANCH} into develop"
  echo ""
  echo "## Date: $(date '+%Y-%m-%d %H:%M:%S')"
  echo "## Commit messages"
  echo "----------------"
  git log develop.."$CURRENT_BRANCH" --pretty=format:"%h %s (%an, %ad)" --date=short
} > "$FILENAME"

echo "‚úÖ Commit history saved to $FILENAME"

# --- Ajoute et commit le fichier d'historique ---
git add "$FILENAME"
if ! HUSKY=0 git commit -m "üìù Merge log for bugfix/$BUGFIX_NAME"; then
  echo "‚ùå Failed to commit merge log."
  exit 1
fi

# --- Fusion de la bugfix dans develop ---
echo "üîÄ Merging '$CURRENT_BRANCH' into 'develop'..."
if ! HUSKY=0 git merge --no-ff "$CURRENT_BRANCH" -m "üîÄ Merge bugfix/$BUGFIX_NAME into develop"; then
  echo "‚ùå Merge failed. Please resolve conflicts manually."
  exit 1
fi

# --- Tag annot√© sur develop ---
echo "üè∑Ô∏è  Tagging develop with '$TAG'..."
if ! HUSKY=0 git tag -a "$TAG" -m "Merge of bugfix/$BUGFIX_NAME into develop"; then
  echo "‚ùå Failed to create tag '$TAG'."
  exit 1
fi

# --- Push develop et le tag ---
echo "üöÄ Pushing 'develop' and tag '$TAG' to origin..."
if ! HUSKY=0 git push origin develop && HUSKY=0 git push origin "$TAG"; then
  echo "‚ùå Failed to push to origin."
  exit 1
fi

# --- Suppression de la branche locale ---
echo "üßπ Deleting local branch '$CURRENT_BRANCH'..."
if ! git branch -d "$CURRENT_BRANCH"; then
  echo "‚ö†Ô∏è  Could not delete branch '$CURRENT_BRANCH'. You may need to delete it manually."
else
  echo "‚úÖ Branch '$CURRENT_BRANCH' deleted."
fi

# --- Suppression de la branche distante ---
echo "üßπ Deleting remote branch '$CURRENT_BRANCH'..."
if ! git push origin --delete "$CURRENT_BRANCH"; then
  echo "‚ö†Ô∏è  Could not delete remote branch '$CURRENT_BRANCH'. You may need to delete it manually."
else
  echo "‚úÖ Remote branch '$CURRENT_BRANCH' deleted."
fi

# --- R√©sum√© final ---
echo "üéâ Merge complete! Bugfix '$BUGFIX_NAME' is now part of 'develop'."
echo "üìÑ Merge log: $FILENAME"
echo "üè∑Ô∏è  Tag created: $TAG"
