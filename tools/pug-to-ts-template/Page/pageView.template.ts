/**
 * DO NOT EDIT THIS FILE DIRECTLY
 * This file has been generated by the tool @bonsai/pug-ts
 * Edit the file Page.view.template.pug that will generate the PageView.template.ts file automatically
 */
import {
  VDom,
  _,
  DataTypes,
  TTemplateFunction,
  TDataTypesFromStructure,
  TEntityJsonData,
  VNode,
  VNodeChildren,
  VNodeData,
  VNodeOn,
  Hooks
} from "bonsai";

import { PageView } from "./Page.view";

export const pageViewTemplate: TTemplateFunction<PageView> =
  function pageViewTemplateFn(view: PageView, data: TPageViewTemplateData) {
    if (!VDom) {
      throw "VDom not found.";
    }
    const elementSelector = view.elementSelector;
    const uiEventsBindings = view.uiEventBindings;
    const regions = view.regionElements || null;
    if (
      "div" !== elementSelector.tagName ||
      ("id" === elementSelector.attr &&
        "[object Object]" !== elementSelector.value) ||
      ("class" === elementSelector.attr &&
        !(<any[]>[undefined]).includes(elementSelector.value))
    ) {
      throw "Invalid root element in pageViewTemplateFn function";
    }

    const n1Child: VNodeChildren = [];
    if (data.hasHeader) {
      const n2Child: VNodeChildren = [];
      const props2: VNodeData = {};
      props2.key = "header-region";
      props2.attrs = {};
      props2.attrs.id = "header-region";
      props2.on = {};
      props2.hook = {};
      const uiEventBinding_2_0 = "#header-region";
      if (Object.keys(uiEventsBindings).includes(uiEventBinding_2_0)) {
        uiEventsBindings["#header-region"].forEach((eventBinding) => {
          (props2.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
        });
      }
      if (!_.isNull(regions)) {
        Object.values(regions as any).forEach((regionElement: any) => {
          if (
            regionElement.selector === "#" &&
            regionElement.value === "header-region"
          ) {
            (props2.hook as Hooks).insert = regionElement.insertCallback;
            (props2.hook as Hooks).remove = regionElement.removeCallback;
          }
        });
      }
      var n2 = VDom.h("div", props2, n2Child);
      n1Child.push(n2);
    }

    const n3Child: VNodeChildren = [];
    if (data.theme == "classic") {
      const n4Child: VNodeChildren = [];
      n4Child.push(VDom.text("Thème classique"));
      const props4: VNodeData = {};
      var n4 = VDom.h("h2", props4, n4Child);
      n3Child.push(n4);
    } else {
      const n5Child: VNodeChildren = [];
      n5Child.push(VDom.text("Thème autre"));
      const props5: VNodeData = {};
      var n5 = VDom.h("h2", props5, n5Child);
      n3Child.push(n5);
    }
    var name = data.isLogged ? "Maître" : "Cher inconnu";

    const n6Child: VNodeChildren = [];
    n6Child.push(VDom.text("Bonjour, "));
    n6Child.push(VDom.text(name));
    const props6: VNodeData = {};
    var n6 = VDom.h("p", props6, n6Child);
    n3Child.push(n6);

    const n7Child: VNodeChildren = [];
    const props7: VNodeData = {};
    var n7 = VDom.h("hr", props7, n7Child);
    n3Child.push(n7);

    const n8Child: VNodeChildren = [];
    n8Child.push(VDom.text("Voulez-vous de la région Header ?"));
    const props8: VNodeData = {};
    var n8 = VDom.h("h3", props8, n8Child);
    n3Child.push(n8);
    n3Child.push(show_header_button(data.hasHeader)[0]);
    n3Child.push(hide_header_button(data.hasHeader)[0]);

    const n9Child: VNodeChildren = [];
    const props9: VNodeData = {};
    var n9 = VDom.h("hr", props9, n9Child);
    n3Child.push(n9);

    const n10Child: VNodeChildren = [];
    n10Child.push(VDom.text("Voulez-vous vous connecter ?"));
    const props10: VNodeData = {};
    props10.attrs = {};
    props10.attrs["style"] = "font-weight: bold";
    var n10 = VDom.h("h3", props10, n10Child);
    n3Child.push(n10);

    const n11Child: VNodeChildren = [];
    n11Child.push(VDom.text("Voulez-vous vous connecter ?"));
    const props11: VNodeData = {};
    props11.attrs = {};
    props11.attrs["data-test"] = "ok";
    props11.on = {};
    props11.hook = {};
    const uiEventBinding_11_0 = "[data-test]";
    if (Object.keys(uiEventsBindings).includes(uiEventBinding_11_0)) {
      uiEventsBindings["[data-test]"].forEach((eventBinding) => {
        (props11.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
      });
    }
    if (!_.isNull(regions)) {
      Object.values(regions as any).forEach((regionElement: any) => {
        if (
          regionElement.selector === "data-test" &&
          regionElement.value === "ok"
        ) {
          (props11.hook as Hooks).insert = regionElement.insertCallback;
          (props11.hook as Hooks).remove = regionElement.removeCallback;
        }
      });
    }
    var n11 = VDom.h("h3", props11, n11Child);
    n3Child.push(n11);
    const loginDisplay = data.isLogged ? "display: none" : "display: block";
    const unLoginDisplay = data.isLogged ? "display: block" : "display: none";

    const n12Child: VNodeChildren = [];
    n12Child.push(VDom.text("Se connecter"));
    const props12: VNodeData = {};
    props12.attrs = {};
    props12.attrs.class = "Content-login";
    props12.attrs["type"] = "button";
    props12.attrs["style"] = loginDisplay;
    props12.on = {};
    props12.hook = {};
    const uiEventBinding_12_0 = ".Content-login";
    if (Object.keys(uiEventsBindings).includes(uiEventBinding_12_0)) {
      uiEventsBindings[".Content-login"].forEach((eventBinding) => {
        (props12.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
      });
    }
    if (!_.isNull(regions)) {
      Object.values(regions as any).forEach((regionElement: any) => {
        if (
          regionElement.selector === "." &&
          regionElement.value === "Content-login"
        ) {
          (props12.hook as Hooks).insert = regionElement.insertCallback;
          (props12.hook as Hooks).remove = regionElement.removeCallback;
        }
      });
    }
    var n12 = VDom.h("button", props12, n12Child);
    n3Child.push(n12);

    const n13Child: VNodeChildren = [];
    n13Child.push(VDom.text("Se déconnecter"));
    const props13: VNodeData = {};
    props13.attrs = {};
    props13.attrs.class = "Content-unLogin";
    props13.attrs["type"] = "button";
    props13.attrs["style"] = unLoginDisplay;
    props13.on = {};
    props13.hook = {};
    const uiEventBinding_13_0 = ".Content-unLogin";
    if (Object.keys(uiEventsBindings).includes(uiEventBinding_13_0)) {
      uiEventsBindings[".Content-unLogin"].forEach((eventBinding) => {
        (props13.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
      });
    }
    if (!_.isNull(regions)) {
      Object.values(regions as any).forEach((regionElement: any) => {
        if (
          regionElement.selector === "." &&
          regionElement.value === "Content-unLogin"
        ) {
          (props13.hook as Hooks).insert = regionElement.insertCallback;
          (props13.hook as Hooks).remove = regionElement.removeCallback;
        }
      });
    }
    var n13 = VDom.h("button", props13, n13Child);
    n3Child.push(n13);

    const n14Child: VNodeChildren = [];
    const props14: VNodeData = {};
    var n14 = VDom.h("br", props14, n14Child);
    n3Child.push(n14);

    const n15Child: VNodeChildren = [];
    const props15: VNodeData = {};
    var n15 = VDom.h("hr", props15, n15Child);
    n3Child.push(n15);
    n3Child.push(test()[0]);
    switch (data.hasHeader) {
      case true:
        const n16Child: VNodeChildren = [];
        n16Child.push(VDom.text("OK"));
        const props16: VNodeData = {};
        var n16 = VDom.h("p", props16, n16Child);
        n3Child.push(n16);
        break;
      case false:
        const n17Child: VNodeChildren = [];
        n17Child.push(VDom.text("NOK"));
        const props17: VNodeData = {};
        var n17 = VDom.h("p", props17, n17Child);
        n3Child.push(n17);
        break;
    }
    const props3: VNodeData = {};
    props3.key = "content";
    props3.attrs = {};
    props3.attrs.id = "content";
    props3.attrs["data-theme"] = data.theme;
    props3.on = {};
    props3.hook = {};
    const uiEventBinding_3_0 = "#content";
    if (Object.keys(uiEventsBindings).includes(uiEventBinding_3_0)) {
      uiEventsBindings["#content"].forEach((eventBinding) => {
        (props3.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
      });
    }
    if (!_.isNull(regions)) {
      Object.values(regions as any).forEach((regionElement: any) => {
        if (
          regionElement.selector === "#" &&
          regionElement.value === "content"
        ) {
          (props3.hook as Hooks).insert = regionElement.insertCallback;
          (props3.hook as Hooks).remove = regionElement.removeCallback;
        }
      });
    }
    const uiEventBinding_3_1 = data.theme;
    if (Object.keys(uiEventsBindings).includes(uiEventBinding_3_1)) {
      uiEventsBindings["null"].forEach((eventBinding) => {
        (props3.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
      });
    }
    if (!_.isNull(regions)) {
      Object.values(regions as any).forEach((regionElement: any) => {
        if (
          regionElement.selector === "data-theme" &&
          regionElement.value === "data.theme"
        ) {
          (props3.hook as Hooks).insert = regionElement.insertCallback;
          (props3.hook as Hooks).remove = regionElement.removeCallback;
        }
      });
    }
    var n3 = VDom.h("div", props3, n3Child);
    n1Child.push(n3);
    const props1: VNodeData = {};
    props1.key = "page-view";
    props1.attrs = {};
    props1.attrs.id = "page-view";
    props1.on = {};
    props1.hook = {};
    const uiEventBinding_1_0 = "#page-view";
    if (Object.keys(uiEventsBindings).includes(uiEventBinding_1_0)) {
      uiEventsBindings["#page-view"].forEach((eventBinding) => {
        (props1.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
      });
    }
    if (!_.isNull(regions)) {
      Object.values(regions as any).forEach((regionElement: any) => {
        if (
          regionElement.selector === "#" &&
          regionElement.value === "page-view"
        ) {
          (props1.hook as Hooks).insert = regionElement.insertCallback;
          (props1.hook as Hooks).remove = regionElement.removeCallback;
        }
      });
    }
    function test(__block?: any) {
      const n1Child: VNodeChildren = [];

      const n2Child: VNodeChildren = [];
      n2Child.push(VDom.text("Le test d'include a réussi."));
      const props2: VNodeData = {};
      props2.attrs = {};
      props2.attrs.class = "test";
      props2.on = {};
      props2.hook = {};
      const uiEventBinding_2_0 = ".test";
      if (Object.keys(uiEventsBindings).includes(uiEventBinding_2_0)) {
        uiEventsBindings[".test"].forEach((eventBinding) => {
          (props2.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
        });
      }
      if (!_.isNull(regions)) {
        Object.values(regions as any).forEach((regionElement: any) => {
          if (
            regionElement.selector === "." &&
            regionElement.value === "test"
          ) {
            (props2.hook as Hooks).insert = regionElement.insertCallback;
            (props2.hook as Hooks).remove = regionElement.removeCallback;
          }
        });
      }
      var n2 = VDom.h("p", props2, n2Child);
      n1Child.push(n2);
      return n1Child;
    }

    function show_header_button(hasHeader: any, __block?: any) {
      const n1Child: VNodeChildren = [];
      if (hasHeader) {
        const n2Child: VNodeChildren = [];
        n2Child.push(VDom.text("Oui !"));
        const props2: VNodeData = {};
        props2.attrs = {};
        props2.attrs.class = "Content-show-header";
        props2.attrs["type"] = "button";
        props2.attrs["style"] = "display:block";
        props2.on = {};
        props2.hook = {};
        const uiEventBinding_2_0 = ".Content-show-header";
        if (Object.keys(uiEventsBindings).includes(uiEventBinding_2_0)) {
          uiEventsBindings[".Content-show-header"].forEach((eventBinding) => {
            (props2.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
          });
        }
        if (!_.isNull(regions)) {
          Object.values(regions as any).forEach((regionElement: any) => {
            if (
              regionElement.selector === "." &&
              regionElement.value === "Content-show-header"
            ) {
              (props2.hook as Hooks).insert = regionElement.insertCallback;
              (props2.hook as Hooks).remove = regionElement.removeCallback;
            }
          });
        }
        var n2 = VDom.h("button", props2, n2Child);
        n1Child.push(n2);
      } else {
        const n3Child: VNodeChildren = [];
        n3Child.push(VDom.text("Oui !"));
        const props3: VNodeData = {};
        props3.attrs = {};
        props3.attrs.class = "Content-show-header";
        props3.attrs["type"] = "button";
        props3.attrs["style"] = "display:none";
        props3.on = {};
        props3.hook = {};
        const uiEventBinding_3_0 = ".Content-show-header";
        if (Object.keys(uiEventsBindings).includes(uiEventBinding_3_0)) {
          uiEventsBindings[".Content-show-header"].forEach((eventBinding) => {
            (props3.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
          });
        }
        if (!_.isNull(regions)) {
          Object.values(regions as any).forEach((regionElement: any) => {
            if (
              regionElement.selector === "." &&
              regionElement.value === "Content-show-header"
            ) {
              (props3.hook as Hooks).insert = regionElement.insertCallback;
              (props3.hook as Hooks).remove = regionElement.removeCallback;
            }
          });
        }
        var n3 = VDom.h("button", props3, n3Child);
        n1Child.push(n3);
      }
      return n1Child;
    }

    function hide_header_button(hasHeader: any, __block?: any) {
      const n1Child: VNodeChildren = [];
      if (hasHeader) {
        const n2Child: VNodeChildren = [];
        n2Child.push(VDom.text("Non !"));
        const props2: VNodeData = {};
        props2.attrs = {};
        props2.attrs.class = "Content-hide-header";
        props2.attrs["type"] = "button";
        props2.attrs["style"] = "display: none";
        props2.on = {};
        props2.hook = {};
        const uiEventBinding_2_0 = ".Content-hide-header";
        if (Object.keys(uiEventsBindings).includes(uiEventBinding_2_0)) {
          uiEventsBindings[".Content-hide-header"].forEach((eventBinding) => {
            (props2.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
          });
        }
        if (!_.isNull(regions)) {
          Object.values(regions as any).forEach((regionElement: any) => {
            if (
              regionElement.selector === "." &&
              regionElement.value === "Content-hide-header"
            ) {
              (props2.hook as Hooks).insert = regionElement.insertCallback;
              (props2.hook as Hooks).remove = regionElement.removeCallback;
            }
          });
        }
        var n2 = VDom.h("button", props2, n2Child);
        n1Child.push(n2);
      } else {
        const n3Child: VNodeChildren = [];
        n3Child.push(VDom.text("Non !"));
        const props3: VNodeData = {};
        props3.attrs = {};
        props3.attrs.class = "Content-hide-header";
        props3.attrs["type"] = "button";
        props3.attrs["style"] = "display: block";
        props3.on = {};
        props3.hook = {};
        const uiEventBinding_3_0 = ".Content-hide-header";
        if (Object.keys(uiEventsBindings).includes(uiEventBinding_3_0)) {
          uiEventsBindings[".Content-hide-header"].forEach((eventBinding) => {
            (props3.on as VNodeOn)[eventBinding.event] = eventBinding.callback;
          });
        }
        if (!_.isNull(regions)) {
          Object.values(regions as any).forEach((regionElement: any) => {
            if (
              regionElement.selector === "." &&
              regionElement.value === "Content-hide-header"
            ) {
              (props3.hook as Hooks).insert = regionElement.insertCallback;
              (props3.hook as Hooks).remove = regionElement.removeCallback;
            }
          });
        }
        var n3 = VDom.h("button", props3, n3Child);
        n1Child.push(n3);
      }
      return n1Child;
    }

    return VDom.h("div", props1, n1Child);
  };

const PageViewDatastructure = {
  theme: DataTypes.String(),
  isLogged: DataTypes.Boolean(),
  hasHeader: DataTypes.Boolean(),
  testArray: DataTypes.Array({
    element: DataTypes.String()
  })
};

export type TPageViewDatastructure = TDataTypesFromStructure<
  typeof PageViewDatastructure
>;

type TPageViewTemplateData = Required<TEntityJsonData<TPageViewDatastructure>>;
